// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kedro.proto

package kedro

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunSummary struct {
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Success              string   `protobuf:"bytes,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunSummary) Reset()         { *m = RunSummary{} }
func (m *RunSummary) String() string { return proto.CompactTextString(m) }
func (*RunSummary) ProtoMessage()    {}
func (*RunSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dcd6e06ede83c05, []int{0}
}

func (m *RunSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunSummary.Unmarshal(m, b)
}
func (m *RunSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunSummary.Marshal(b, m, deterministic)
}
func (m *RunSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunSummary.Merge(m, src)
}
func (m *RunSummary) XXX_Size() int {
	return xxx_messageInfo_RunSummary.Size(m)
}
func (m *RunSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RunSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RunSummary proto.InternalMessageInfo

func (m *RunSummary) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RunSummary) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

type RunParams struct {
	PipelineName         string   `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	Tags                 string   `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunParams) Reset()         { *m = RunParams{} }
func (m *RunParams) String() string { return proto.CompactTextString(m) }
func (*RunParams) ProtoMessage()    {}
func (*RunParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dcd6e06ede83c05, []int{1}
}

func (m *RunParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunParams.Unmarshal(m, b)
}
func (m *RunParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunParams.Marshal(b, m, deterministic)
}
func (m *RunParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunParams.Merge(m, src)
}
func (m *RunParams) XXX_Size() int {
	return xxx_messageInfo_RunParams.Size(m)
}
func (m *RunParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RunParams.DiscardUnknown(m)
}

var xxx_messageInfo_RunParams proto.InternalMessageInfo

func (m *RunParams) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *RunParams) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

type PipelineSummary struct {
	Pipeline             []string `protobuf:"bytes,1,rep,name=pipeline,proto3" json:"pipeline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineSummary) Reset()         { *m = PipelineSummary{} }
func (m *PipelineSummary) String() string { return proto.CompactTextString(m) }
func (*PipelineSummary) ProtoMessage()    {}
func (*PipelineSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dcd6e06ede83c05, []int{2}
}

func (m *PipelineSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineSummary.Unmarshal(m, b)
}
func (m *PipelineSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineSummary.Marshal(b, m, deterministic)
}
func (m *PipelineSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineSummary.Merge(m, src)
}
func (m *PipelineSummary) XXX_Size() int {
	return xxx_messageInfo_PipelineSummary.Size(m)
}
func (m *PipelineSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineSummary.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineSummary proto.InternalMessageInfo

func (m *PipelineSummary) GetPipeline() []string {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type PipelineParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineParams) Reset()         { *m = PipelineParams{} }
func (m *PipelineParams) String() string { return proto.CompactTextString(m) }
func (*PipelineParams) ProtoMessage()    {}
func (*PipelineParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dcd6e06ede83c05, []int{3}
}

func (m *PipelineParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineParams.Unmarshal(m, b)
}
func (m *PipelineParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineParams.Marshal(b, m, deterministic)
}
func (m *PipelineParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineParams.Merge(m, src)
}
func (m *PipelineParams) XXX_Size() int {
	return xxx_messageInfo_PipelineParams.Size(m)
}
func (m *PipelineParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineParams.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineParams proto.InternalMessageInfo

type RunId struct {
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunId) Reset()         { *m = RunId{} }
func (m *RunId) String() string { return proto.CompactTextString(m) }
func (*RunId) ProtoMessage()    {}
func (*RunId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dcd6e06ede83c05, []int{4}
}

func (m *RunId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunId.Unmarshal(m, b)
}
func (m *RunId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunId.Marshal(b, m, deterministic)
}
func (m *RunId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunId.Merge(m, src)
}
func (m *RunId) XXX_Size() int {
	return xxx_messageInfo_RunId.Size(m)
}
func (m *RunId) XXX_DiscardUnknown() {
	xxx_messageInfo_RunId.DiscardUnknown(m)
}

var xxx_messageInfo_RunId proto.InternalMessageInfo

func (m *RunId) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type RunStatus struct {
	Events               []string `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	ExitCode             string   `protobuf:"bytes,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	RunId                string   `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Success              string   `protobuf:"bytes,4,opt,name=success,proto3" json:"success,omitempty"`
	RunStatus            string   `protobuf:"bytes,5,opt,name=run_status,json=runStatus,proto3" json:"run_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunStatus) Reset()         { *m = RunStatus{} }
func (m *RunStatus) String() string { return proto.CompactTextString(m) }
func (*RunStatus) ProtoMessage()    {}
func (*RunStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dcd6e06ede83c05, []int{5}
}

func (m *RunStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunStatus.Unmarshal(m, b)
}
func (m *RunStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunStatus.Marshal(b, m, deterministic)
}
func (m *RunStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunStatus.Merge(m, src)
}
func (m *RunStatus) XXX_Size() int {
	return xxx_messageInfo_RunStatus.Size(m)
}
func (m *RunStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RunStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RunStatus proto.InternalMessageInfo

func (m *RunStatus) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *RunStatus) GetExitCode() string {
	if m != nil {
		return m.ExitCode
	}
	return ""
}

func (m *RunStatus) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RunStatus) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

func (m *RunStatus) GetRunStatus() string {
	if m != nil {
		return m.RunStatus
	}
	return ""
}

func init() {
	proto.RegisterType((*RunSummary)(nil), "kedro.RunSummary")
	proto.RegisterType((*RunParams)(nil), "kedro.RunParams")
	proto.RegisterType((*PipelineSummary)(nil), "kedro.PipelineSummary")
	proto.RegisterType((*PipelineParams)(nil), "kedro.PipelineParams")
	proto.RegisterType((*RunId)(nil), "kedro.RunId")
	proto.RegisterType((*RunStatus)(nil), "kedro.RunStatus")
}

func init() {
	proto.RegisterFile("kedro.proto", fileDescriptor_8dcd6e06ede83c05)
}

var fileDescriptor_8dcd6e06ede83c05 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xdd, 0x4a, 0xf3, 0x40,
	0x10, 0xfd, 0xf2, 0xb5, 0x89, 0xcd, 0xd8, 0x6a, 0x1d, 0x68, 0x09, 0x11, 0xa5, 0xac, 0x37, 0x45,
	0xb4, 0x88, 0x5e, 0xeb, 0x8d, 0xde, 0x14, 0x45, 0xca, 0xf6, 0x01, 0xca, 0xda, 0x5d, 0x24, 0x68,
	0x36, 0x65, 0x7f, 0x44, 0xdf, 0xc2, 0x57, 0xf0, 0x4d, 0xa5, 0x9b, 0xdd, 0xfe, 0x88, 0xde, 0x65,
	0xce, 0x99, 0x39, 0x7b, 0xe6, 0x4c, 0x60, 0xf7, 0x45, 0x70, 0x55, 0x8d, 0x16, 0xaa, 0x32, 0x15,
	0xc6, 0xae, 0x20, 0xd7, 0x00, 0xd4, 0xca, 0xa9, 0x2d, 0x4b, 0xa6, 0x3e, 0xb0, 0x07, 0x89, 0xb2,
	0x72, 0x56, 0xf0, 0x2c, 0x1a, 0x44, 0xc3, 0x94, 0xc6, 0xca, 0xca, 0x31, 0xc7, 0x0c, 0x76, 0xb4,
	0x9d, 0xcf, 0x85, 0xd6, 0xd9, 0x7f, 0x87, 0x87, 0x92, 0xdc, 0x41, 0x4a, 0xad, 0x9c, 0x30, 0xc5,
	0x4a, 0x8d, 0x27, 0xd0, 0x59, 0x14, 0x0b, 0xf1, 0x5a, 0x48, 0x31, 0x93, 0xac, 0x14, 0x5e, 0xa4,
	0x1d, 0xc0, 0x47, 0x56, 0x0a, 0x44, 0x68, 0x1a, 0xf6, 0x1c, 0x84, 0xdc, 0x37, 0x39, 0x87, 0xfd,
	0x89, 0xef, 0x09, 0x4e, 0x72, 0x68, 0x85, 0xb1, 0x2c, 0x1a, 0x34, 0x86, 0x29, 0x5d, 0xd5, 0xa4,
	0x0b, 0x7b, 0xa1, 0xbd, 0x7e, 0x99, 0x1c, 0x43, 0x4c, 0x9d, 0xd3, 0xdf, 0x17, 0x20, 0x9f, 0x91,
	0xf3, 0x39, 0x35, 0xcc, 0x58, 0x8d, 0x7d, 0x48, 0xc4, 0x9b, 0x90, 0x46, 0x7b, 0x65, 0x5f, 0xe1,
	0x21, 0xa4, 0xe2, 0xbd, 0x30, 0xb3, 0x79, 0xc5, 0x85, 0xf7, 0xd7, 0x5a, 0x02, 0xb7, 0x15, 0x17,
	0x1b, 0xca, 0x8d, 0x3f, 0xa2, 0x69, 0x6e, 0x45, 0x83, 0x47, 0x00, 0xcb, 0x01, 0xed, 0xde, 0xcc,
	0x62, 0x47, 0xa6, 0x2a, 0x98, 0xb8, 0xfc, 0x8a, 0x20, 0xbe, 0x5f, 0x9e, 0x00, 0x6f, 0xa0, 0xf3,
	0x50, 0x68, 0x13, 0x56, 0xd2, 0xd8, 0x1b, 0xd5, 0x87, 0xda, 0x5e, 0x32, 0xef, 0xff, 0x80, 0x43,
	0x54, 0xa7, 0xd0, 0xa0, 0x56, 0x62, 0xd7, 0xd3, 0xab, 0x7b, 0xe4, 0x07, 0x6b, 0x24, 0xf4, 0x9e,
	0x41, 0xe2, 0x43, 0x68, 0xaf, 0xc9, 0x31, 0xcf, 0x37, 0x86, 0x6b, 0x9e, 0xfc, 0xbb, 0x88, 0x9e,
	0x12, 0xf7, 0xab, 0x5c, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0xed, 0x40, 0xed, 0xfa, 0x39, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KedroClient is the client API for Kedro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KedroClient interface {
	ListPipelines(ctx context.Context, in *PipelineParams, opts ...grpc.CallOption) (*PipelineSummary, error)
	Run(ctx context.Context, in *RunParams, opts ...grpc.CallOption) (*RunSummary, error)
	Status(ctx context.Context, in *RunId, opts ...grpc.CallOption) (Kedro_StatusClient, error)
}

type kedroClient struct {
	cc grpc.ClientConnInterface
}

func NewKedroClient(cc grpc.ClientConnInterface) KedroClient {
	return &kedroClient{cc}
}

func (c *kedroClient) ListPipelines(ctx context.Context, in *PipelineParams, opts ...grpc.CallOption) (*PipelineSummary, error) {
	out := new(PipelineSummary)
	err := c.cc.Invoke(ctx, "/kedro.Kedro/ListPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kedroClient) Run(ctx context.Context, in *RunParams, opts ...grpc.CallOption) (*RunSummary, error) {
	out := new(RunSummary)
	err := c.cc.Invoke(ctx, "/kedro.Kedro/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kedroClient) Status(ctx context.Context, in *RunId, opts ...grpc.CallOption) (Kedro_StatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kedro_serviceDesc.Streams[0], "/kedro.Kedro/Status", opts...)
	if err != nil {
		return nil, err
	}
	x := &kedroStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kedro_StatusClient interface {
	Recv() (*RunStatus, error)
	grpc.ClientStream
}

type kedroStatusClient struct {
	grpc.ClientStream
}

func (x *kedroStatusClient) Recv() (*RunStatus, error) {
	m := new(RunStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KedroServer is the server API for Kedro service.
type KedroServer interface {
	ListPipelines(context.Context, *PipelineParams) (*PipelineSummary, error)
	Run(context.Context, *RunParams) (*RunSummary, error)
	Status(*RunId, Kedro_StatusServer) error
}

// UnimplementedKedroServer can be embedded to have forward compatible implementations.
type UnimplementedKedroServer struct {
}

func (*UnimplementedKedroServer) ListPipelines(ctx context.Context, req *PipelineParams) (*PipelineSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (*UnimplementedKedroServer) Run(ctx context.Context, req *RunParams) (*RunSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (*UnimplementedKedroServer) Status(req *RunId, srv Kedro_StatusServer) error {
	return status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterKedroServer(s *grpc.Server, srv KedroServer) {
	s.RegisterService(&_Kedro_serviceDesc, srv)
}

func _Kedro_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KedroServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kedro.Kedro/ListPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KedroServer).ListPipelines(ctx, req.(*PipelineParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kedro_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KedroServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kedro.Kedro/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KedroServer).Run(ctx, req.(*RunParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kedro_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KedroServer).Status(m, &kedroStatusServer{stream})
}

type Kedro_StatusServer interface {
	Send(*RunStatus) error
	grpc.ServerStream
}

type kedroStatusServer struct {
	grpc.ServerStream
}

func (x *kedroStatusServer) Send(m *RunStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _Kedro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kedro.Kedro",
	HandlerType: (*KedroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPipelines",
			Handler:    _Kedro_ListPipelines_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Kedro_Run_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Status",
			Handler:       _Kedro_Status_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kedro.proto",
}
